import requests
import os
import time
from jinja2 import Template
from datetime import datetime

# Votre clé API VirusTotal (remplacez par votre propre clé API)
API_KEY = 'CHANGE ME'

# URL de l'API pour soumettre un fichier à analyser
URL_SCAN_FILE = 'https://www.virustotal.com/vtapi/v2/file/scan'
# URL de l'API pour récupérer les résultats d'une analyse de fichier
URL_REPORT = 'https://www.virustotal.com/vtapi/v2/file/report'

# Fonction pour lire la template à partir d'un fichier externe
def lire_template(filepath_template):
    with open(filepath_template, 'r') as file:
        return file.read()

# Soumettre un fichier à VirusTotal pour analyse
def soumettre_fichier_virustotal(filepath):
    try:
        files = {'file': (os.path.basename(filepath), open(filepath, 'rb'))}
        params = {'apikey': API_KEY}
        response = requests.post(URL_SCAN_FILE, files=files, params=params)
        if response.status_code == 200:
            return response.json()['resource']  # Retourne le resource_id (hash) du fichier soumis
        else:
            print(f"Erreur lors de la soumission du fichier : {response.status_code}")
            return None
    except Exception as e:
        print(f"Erreur lors de la soumission à VirusTotal : {e}")
        return None

# Récupérer le rapport VirusTotal en utilisant le resource_id
def recuperer_rapport_virustotal(resource_id):
    try:
        params = {'apikey': API_KEY, 'resource': resource_id}
        response = requests.get(URL_REPORT, params=params)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"Erreur lors de la récupération du rapport : {response.status_code}")
            return None
    except Exception as e:
        print(f"Erreur lors de la récupération du rapport VirusTotal : {e}")
        return None

# Générer un rapport à partir de la template et des résultats VirusTotal
def generer_rapport(filepath, result_virustotal, template_filepath, fichier_rapport="rapport_virustotal.md"):
    template_contenu = lire_template(template_filepath)
    template = Template(template_contenu)

    # Extraire les informations nécessaires
    meaningful_name = result_virustotal.get('scan_id', 'Unknown')
    label = result_virustotal.get('verbose_msg', 'Unknown')
    reputation = result_virustotal.get('positives', 0)
    
    # Préparer les verdicts sandbox et les votes
    sandbox_verdicts = result_virustotal.get('scans', {})
    total_votes = {
        'harmless': result_virustotal.get('total', 0),
        'malicious': result_virustotal.get('positives', 0)
    }

    # Générer le rapport avec la template
    rapport = template.render(
        meaningful_name=meaningful_name,
        label=label,
        reputation=reputation,
        sandbox_verdicts=sandbox_verdicts,
        total_votes=total_votes
    )

    # Enregistrer le rapport dans un fichier markdown (.md)
    with open(fichier_rapport, 'w') as file:
        file.write(rapport)

    print(f"Le rapport a été généré : {fichier_rapport}")

# Fonction pour demander à l'utilisateur s'il veut supprimer un fichier
def demander_suppression_fichier(filepath):
    reponse = input(f"Le fichier {filepath} est considéré comme suspect. Voulez-vous le supprimer ? (o/n) : ").strip().lower()
    if reponse == 'o':
        try:
            os.remove(filepath)
            print(f"Le fichier '{filepath}' a été supprimé.")
        except Exception as e:
            print(f"Erreur lors de la suppression du fichier : {e}")
    else:
        print(f"Le fichier '{filepath}' n'a pas été supprimé.")

# Fonction principale pour soumettre et analyser un fichier avec VirusTotal
def analyser_fichier_virustotal(filepath, template_filepath):
    # Soumettre le fichier à VirusTotal
    resource_id = soumettre_fichier_virustotal(filepath)
    if not resource_id:
        print("Erreur lors de la soumission du fichier à VirusTotal.")
        return
    
    print("Fichier soumis. En attente de l'analyse VirusTotal...")

    # Attendre quelques secondes avant de demander le rapport
    time.sleep(15)  # Temps d'attente (peut être ajusté en fonction de la taille du fichier)

    # Récupérer le rapport VirusTotal
    result_virustotal = recuperer_rapport_virustotal(resource_id)
    if not result_virustotal:
        print("Erreur lors de la récupération du rapport.")
        return
    
    # Générer le rapport à partir de la template
    generer_rapport(filepath, result_virustotal, template_filepath)

    # Afficher le statut global
    if result_virustotal.get('positives', 0) > 0:
        print("Malware détecté. Consultez le rapport pour plus de détails.")
        # Proposer la suppression du fichier si des malwares sont détectés
        demander_suppression_fichier(filepath)
    else:
        print("Aucun malware détecté.")

# Exemple d'utilisation
if __name__ == "__main__":
    fichier_a_analyser = input("Entrez le chemin du fichier à analyser : ")
    fichier_template = "template.md"  # Chemin du fichier de template
    
    # Vérification que le fichier existe
    if not os.path.exists(fichier_a_analyser):
        print(f"Erreur : Le fichier '{fichier_a_analyser}' n'existe pas.")
        exit(1)

    # Vérification que le fichier de template existe
    if not os.path.exists(fichier_template):
        print(f"Erreur : Le fichier template '{fichier_template}' n'existe pas.")
        exit(1)
    
    # Lancer l'analyse avec VirusTotal
    analyser_fichier_virustotal(fichier_a_analyser, fichier_template)
